# app.py
import io
import os
import re
import uuid
import traceback
from flask import Flask, request, send_file, jsonify
from flask_cors import CORS
from config import *
from ai_processor import call_gemini_api_for_cleanup
from doc_formatter import identify_doc_type as recognize_document_type
from doc_formatter import apply_docx_formatting as format_word_document
from doc_formatter import DOC_TYPE_FORMATTERS
from doc_formatter import PlaceholderFormatter  # üõ† Th√™m d√≤ng n√†y ƒë·ªÉ tr√°nh l·ªói

app = Flask(__name__)
CORS(app)

# --- H√†m x·ª≠ l√Ω tag ch·ªØ k√Ω ---
def extract_and_update_signature(body_cleaned, data):
    extracted_title = None
    extracted_name = None

    # T√¨m v√† tr√≠ch xu·∫•t ch·ª©c danh
    pos_match = re.search(r'\[SIGNATURE_POSITION\](.*?)\[/SIGNATURE_POSITION\]', body_cleaned, re.DOTALL)
    if pos_match:
        extracted_title = pos_match.group(1).strip()
        if extracted_title: # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu tr√≠ch xu·∫•t ƒë∆∞·ª£c n·ªôi dung
            print(f"AI extracted signer_title: '{extracted_title}'")
            data['signer_title'] = extracted_title # Ghi ƒë√® gi√° tr·ªã t·ª´ data g·ªëc

    # T√¨m v√† tr√≠ch xu·∫•t t√™n ng∆∞·ªùi k√Ω
    name_match = re.search(r'\[SIGNATURE_NAME\](.*?)\[/SIGNATURE_NAME\]', body_cleaned, re.DOTALL)
    if name_match:
        extracted_name = name_match.group(1).strip()
        if extracted_name: # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu tr√≠ch xu·∫•t ƒë∆∞·ª£c n·ªôi dung
             print(f"AI extracted signer_name: '{extracted_name}'")
             data['signer_name'] = extracted_name # Ghi ƒë√® gi√° tr·ªã t·ª´ data g·ªëc

    # X√≥a c√°c th·∫ª tag kh·ªèi body_cleaned
    body_after_tag_removal = re.sub(r'\[SIGNATURE_POSITION\].*?\[/SIGNATURE_POSITION\]', '', body_cleaned, flags=re.DOTALL).strip()
    body_after_tag_removal = re.sub(r'\[SIGNATURE_NAME\].*?\[/SIGNATURE_NAME\]', '', body_after_tag_removal, flags=re.DOTALL).strip()

    return body_after_tag_removal, data
# --- K·∫øt th√∫c h√†m x·ª≠ l√Ω tag ---


@app.route("/generate", methods=["POST"])
def generate_docx_route():
    try:
        data = request.get_json(force=True)
        title = data.get("title", "VƒÉn b·∫£n")
        body_original = data.get("body", "")
        intended_doc_type = data.get("intended_doc_type", None)

        if not body_original:
            return jsonify({"error": "N·ªôi dung vƒÉn b·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400

        print(f"\nNh·∫≠n y√™u c·∫ßu t·∫°o: '{title}'")
        if intended_doc_type:
            print(f"Lo·∫°i vƒÉn b·∫£n ng∆∞·ªùi d√πng d·ª± ƒë·ªãnh: {intended_doc_type}")
        else:
            print("Kh√¥ng c√≥ th√¥ng tin lo·∫°i vƒÉn b·∫£n d·ª± ƒë·ªãnh t·ª´ frontend.")

        recognized_doc_type = recognize_document_type(title, body_original)
        if recognized_doc_type:
             print(f"Lo·∫°i vƒÉn b·∫£n nh·∫≠n di·ªán ƒë∆∞·ª£c: {recognized_doc_type}")
        else:
             print("Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c lo·∫°i vƒÉn b·∫£n c·ª• th·ªÉ t·ª´ n·ªôi dung.")

        use_ai_cleanup = data.get("use_ai", True)
        body_cleaned = body_original # Kh·ªüi t·∫°o

        if use_ai_cleanup:
            print("ƒêang g·ªçi AI ƒë·ªÉ l√†m s·∫°ch n·ªôi dung...")
            body_cleaned = call_gemini_api_for_cleanup(body_original)
            print("N·ªôi dung ƒë√£ qua AI l√†m s·∫°ch.")

            # --- X·ª≠ l√Ω th·∫ª Tag ch·ªØ k√Ω SAU KHI AI l√†m s·∫°ch ---
            body_cleaned, data = extract_and_update_signature(body_cleaned, data)
            # --- K·∫øt th√∫c x·ª≠ l√Ω th·∫ª Tag ---

        else:
            # body_cleaned = body_original # ƒê√£ kh·ªüi t·∫°o ·ªü tr√™n
            print("B·ªè qua b∆∞·ªõc AI l√†m s·∫°ch.")

        # G√°n n·ªôi dung cu·ªëi c√πng (ƒë√£ x·ª≠ l√Ω tag n·∫øu c√≥) v√†o data['body']
        data['body'] = body_cleaned

        # G·ªçi h√†m ƒë·ªãnh d·∫°ng v·ªõi data ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t (n·∫øu c√≥)
        document, doc_type_for_filename = format_word_document(data, recognized_doc_type, intended_doc_type)

        output_stream = io.BytesIO()
        document.save(output_stream)
        output_stream.seek(0)
        safe_title = re.sub(r'[\\/*?:"<>|]', "", title).replace(" ", "_")
        # S·ª≠ d·ª•ng doc_type_for_filename (lo·∫°i th·ª±c s·ª± d√πng ƒë·ªÉ format) cho t√™n file
        filename = f"{safe_title}_{doc_type_for_filename}_{uuid.uuid4().hex[:6]}.docx"
        print(f"T·∫°o file: {filename}")

        return send_file(
            output_stream,
            as_attachment=True,
            download_name=filename,
            mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng trong route /generate: {e}")
        traceback.print_exc()
        return jsonify({"error": f"L·ªói server: {str(e)}"}), 500

@app.route("/", methods=["GET"])
def home():
    # L·∫•y danh s√°ch c√°c lo·∫°i ƒë∆∞·ª£c h·ªó tr·ª£ t·ª´ keys c·ªßa DOC_TYPE_FORMATTERS
    # Ki·ªÉm tra xem value c√≥ ph·∫£i l√† PlaceholderFormatter kh√¥ng n·∫øu c·∫ßn ƒë·ªô ch√≠nh x√°c cao h∆°n
    supported_types = [k for k, v in DOC_TYPE_FORMATTERS.items() if not isinstance(v, PlaceholderFormatter)]
    return jsonify({
        "message": "API t·∫°o vƒÉn b·∫£n Word chu·∫©n VN (v5.0 - Final) s·∫µn s√†ng t·∫°i /generate", # C·∫≠p nh·∫≠t version message
        "supported_document_types": sorted(supported_types)
     })

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    # Ch·∫°y v·ªõi debug=False cho production
    app.run(host="0.0.0.0", port=port, debug=False)